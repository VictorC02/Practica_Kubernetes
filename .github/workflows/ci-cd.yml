name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Ejecuta la acci√≥n al hacer push en la rama `main`

  pull_request:
    branches:
      - main  # Ejecuta las acciones al abrir un Pull Request hacia la rama `main`

jobs:
  ci-cd:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: read
      # To report GitHub Actions status checks
      statuses: write

    steps:
      ### 1. Checkout del repositorio ###
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # super-linter needs the full git history to get the
          # list of files that changed across commits
          fetch-depth: 0

      ### 2. Ejecutar Linter (Ejemplo con ESLint para Node.js) ###
      - name: Run Linter
        uses: super-linter/super-linter@v6.6.0  # x-release-please-version
        env:
          # To report GitHub Actions status checks
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          IGNORE_GENERATED_FILES: true
          IGNORE_GITIGNORED_FILES: true
          VALIDATE_ALL_CODEBASE: false

      # ### 3. Ejecutar Pruebas (Ejemplo con Jest para Node.js) ###
      # - name: Run Tests
      #   run: |
      #     npm ci
      #     npm test

      ### 4. Crear la imagen Docker ###
      - name: Build Docker Image
        run: |
          docker build -t ghcr.io/${{ github.repository_owner }}/app:${{ github.sha }} .
          docker tag ghcr.io/${{ github.repository_owner }}/app:${{ github.sha }} ghcr.io/${{ github.repository_owner }}/app:latest

      ### 5. Login en el Container Registry ###
      - name: Login to GitHub
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}  # Configurar en GitHub Secrets
          password: ${{ secrets.GITHUB_TOKEN }}  # Configurar en GitHub Secrets

      ### 6. Push de la imagen al Container Registry ###
      - name: Push Docker Image
        run: |
          docker push ghcr.io/${{ github.repository_owner }}/app:${{ github.sha }}
          docker push ghcr.io/${{ github.repository_owner }}/app:latest

      # ## 7. Desplegar en Kubernetes ###
      # - name: Set Kubernetes Context
      #   uses: azure/setup-kubectl@v3
      #   with:
      #     version: 'v1.34.0'  

      # - name: Deploy to Kubernetes
      #   run: |
      #     kubectl set image deployment/$K8S_DEPLOYMENT $IMAGE_NAME=$REGISTRY/$IMAGE_NAME:latest 
      #     kubectl rollout status deployment/$K8S_DEPLOYMENT 

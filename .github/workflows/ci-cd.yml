name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Ejecuta la acción al hacer push en la rama `main`

  pull_request:
    branches:
      - main  # Ejecuta las acciones al abrir un Pull Request hacia la rama `main`

jobs:
  ci-cd:
    runs-on: ubuntu-latest

    env:
      REGISTRY: docker.io 
      IMAGE_NAME: app   # Nombre de la imagen Docker
      K8S_DEPLOYMENT: app-deployment # Nombre del deployment en Kubernetes

    steps:
      ### 1. Checkout del repositorio ###
      - name: Checkout code
        uses: actions/checkout@v3

      ### 2. Ejecutar Linter (Ejemplo con ESLint para Node.js) ###
      - name: Run Linter
        run: |
          npm install
          npm run lint

      ### 3. Ejecutar Pruebas (Ejemplo con Jest para Node.js) ###
      - name: Run Tests
        run: |
          npm install
          npm test

      ### 4. Crear la imagen Docker ###
      - name: Build Docker Image
        run: |
          docker build -t $REGISTRY/$IMAGE_NAME:latest .

      ### 5. Login en el Container Registry ###
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}  # Configurar en GitHub Secrets
          password: ${{ secrets.DOCKER_PASSWORD }}  # Configurar en GitHub Secrets

      ### 6. Push de la imagen al Container Registry ###
      - name: Push Docker Image
        run: |
          docker push $REGISTRY/$IMAGE_NAME:latest

      ### 7. Desplegar en Kubernetes ###
      - name: Set Kubernetes Context
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.34.0'  # Cambia esto por la versión que usas en tu clúster

      - name: Deploy to Kubernetes
        run: |
          kubectl set image deployment/$K8S_DEPLOYMENT $IMAGE_NAME=$REGISTRY/$IMAGE_NAME:latest 
          kubectl rollout status deployment/$K8S_DEPLOYMENT 
